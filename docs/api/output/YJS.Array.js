Ext.data.JsonP.YJS_Array({"tagname":"class","name":"YJS.Array","autodetected":{},"files":[{"filename":"Array.js","href":"Array.html#YJS-Array"}],"singleton":true,"members":[{"name":"copy","tagname":"method","owner":"YJS.Array","id":"method-copy","meta":{}},{"name":"wrap","tagname":"method","owner":"YJS.Array","id":"method-wrap","meta":{}}],"alternateClassNames":[],"aliases":{},"id":"class-YJS.Array","component":false,"superclasses":[],"subclasses":[],"mixedInto":[],"mixins":[],"parentMixins":[],"requires":[],"uses":[],"html":"<div><pre class=\"hierarchy\"><h4>Files</h4><div class='dependency'><a href='source/Array.html#YJS-Array' target='_blank'>Array.js</a></div></pre><div class='doc-contents'><p>A set of array related methods.</p>\n</div><div class='members'><div class='members-section'><div class='definedBy'>Defined By</div><h3 class='members-title icon-method'>Methods</h3><div class='subsection'><div id='method-copy' class='member first-child not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='YJS.Array'>YJS.Array</span><br/><a href='source/Array.html#YJS-Array-method-copy' target='_blank' class='view-source'>view source</a></div><a href='#!/api/YJS.Array-method-copy' class='name expandable'>copy</a>( <span class='pre'>arrayLikeObj</span> ) : <a href=\"#!/api/Array\" rel=\"Array\" class=\"docClass\">Array</a><span class=\"signature\"></span></div><div class='description'><div class='short'>Creates a copy of the array-like object and returns an array with all the same items. ...</div><div class='long'><p>Creates a copy of the array-like object and returns an array with all the same items.</p>\n\n<pre><code>function () {\n    var args = <a href=\"#!/api/YJS.Array-method-copy\" rel=\"YJS.Array-method-copy\" class=\"docClass\">YJS.Array.copy</a>(arguments);\n    ...\n};\n\n<a href=\"#!/api/YJS.Array-method-copy\" rel=\"YJS.Array-method-copy\" class=\"docClass\">YJS.Array.copy</a>(); // null\n</code></pre>\n\n<p>NOTE: This will only do a shallow copy. Items that are references to objects will be copied as a new reference to\nthe same object. This new reference will be able to mutate the object just like the original reference.</p>\n\n<p>TODO: Handle various array-like objects like a NodeList, CSSRuleList, etc.</p>\n<h3 class=\"pa\">Parameters</h3><ul><li><span class='pre'>arrayLikeObj</span> : <a href=\"#!/api/Array\" rel=\"Array\" class=\"docClass\">Array</a>|Arguments<div class='sub-desc'><p>An array like object.</p>\n</div></li></ul><h3 class='pa'>Returns</h3><ul><li><span class='pre'><a href=\"#!/api/Array\" rel=\"Array\" class=\"docClass\">Array</a></span><div class='sub-desc'><p>A copy of the array-like object or <code>null</code> if the argument is not array-like.</p>\n</div></li></ul></div></div></div><div id='method-wrap' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='YJS.Array'>YJS.Array</span><br/><a href='source/Array.html#YJS-Array-method-wrap' target='_blank' class='view-source'>view source</a></div><a href='#!/api/YJS.Array-method-wrap' class='name expandable'>wrap</a>( <span class='pre'>value</span> ) : <a href=\"#!/api/Array\" rel=\"Array\" class=\"docClass\">Array</a>.&lt;Mixed&gt;<span class=\"signature\"></span></div><div class='description'><div class='short'>Wraps a value in an array if it's not already an array. ...</div><div class='long'><p>Wraps a value in an array if it's not already an array. Returns:</p>\n\n<ul>\n<li>An empty array if given value is <code>undefined</code>.</li>\n<li>Itself if given value is already an array.</li>\n<li>An array with <code>null</code> as the single item if given value is <code>null</code>.</li>\n<li>An array with one item which is the given value, otherwise.</li>\n</ul>\n\n\n<p>Here are some example uses.</p>\n\n<pre><code><a href=\"#!/api/YJS.Array-method-wrap\" rel=\"YJS.Array-method-wrap\" class=\"docClass\">YJS.Array.wrap</a>(); // [] (new empty array)\n<a href=\"#!/api/YJS.Array-method-wrap\" rel=\"YJS.Array-method-wrap\" class=\"docClass\">YJS.Array.wrap</a>([]); // A reference to the passed-in empty array ([]).\n<a href=\"#!/api/YJS.Array-method-wrap\" rel=\"YJS.Array-method-wrap\" class=\"docClass\">YJS.Array.wrap</a>([1,2,3]); // A reference to passed-in array ([1,2,3]).\n<a href=\"#!/api/YJS.Array-method-wrap\" rel=\"YJS.Array-method-wrap\" class=\"docClass\">YJS.Array.wrap</a>(null); // [null]\n<a href=\"#!/api/YJS.Array-method-wrap\" rel=\"YJS.Array-method-wrap\" class=\"docClass\">YJS.Array.wrap</a>(0); // [0]\n<a href=\"#!/api/YJS.Array-method-wrap\" rel=\"YJS.Array-method-wrap\" class=\"docClass\">YJS.Array.wrap</a>(false); // [false]\n<a href=\"#!/api/YJS.Array-method-wrap\" rel=\"YJS.Array-method-wrap\" class=\"docClass\">YJS.Array.wrap</a>(\"\"); // [\"\"]\n</code></pre>\n\n<p>See the Jasmine Specs for more example uses.</p>\n\n<p>NOTE: This function behaves like <code>Ext.Array.from</code> but does not return an empty array when <code>null</code> is passed in. In\nthat case, an array with <code>null</code> as the single item is returned. It also doesn't handle some \"iterables\" like\nNodeList that <code>Ext.Array.from</code> does.</p>\n\n<p>TODO: Handle various array-like objects.</p>\n<h3 class=\"pa\">Parameters</h3><ul><li><span class='pre'>value</span> : ?Mixed<div class='sub-desc'><p>The value to wrap in an array if it's not already an array.</p>\n</div></li></ul><h3 class='pa'>Returns</h3><ul><li><span class='pre'><a href=\"#!/api/Array\" rel=\"Array\" class=\"docClass\">Array</a>.&lt;Mixed&gt;</span><div class='sub-desc'><p>The value as an array.</p>\n</div></li></ul></div></div></div></div></div></div></div>","meta":{}});