Ext.data.JsonP.YJS_log_Log({"tagname":"class","name":"YJS.log.Log","autodetected":{},"files":[{"filename":"Log.js","href":"Log.html#YJS-log-Log"}],"requires":["YJS.log.Config"],"uses":["YJS.log.Level"],"members":[{"name":"name","tagname":"property","owner":"YJS.log.Log","id":"property-name","meta":{"readonly":true}},{"name":"constructor","tagname":"method","owner":"YJS.log.Log","id":"method-constructor","meta":{}},{"name":"debug","tagname":"method","owner":"YJS.log.Log","id":"method-debug","meta":{}},{"name":"error","tagname":"method","owner":"YJS.log.Log","id":"method-error","meta":{}},{"name":"fatal","tagname":"method","owner":"YJS.log.Log","id":"method-fatal","meta":{}},{"name":"info","tagname":"method","owner":"YJS.log.Log","id":"method-info","meta":{}},{"name":"log","tagname":"method","owner":"YJS.log.Log","id":"method-log","meta":{}},{"name":"logAt","tagname":"method","owner":"YJS.log.Log","id":"method-logAt","meta":{}},{"name":"warn","tagname":"method","owner":"YJS.log.Log","id":"method-warn","meta":{}},{"name":"getConfig","tagname":"method","owner":"YJS.log.Log","id":"static-method-getConfig","meta":{"static":true}},{"name":"setConfig","tagname":"method","owner":"YJS.log.Log","id":"static-method-setConfig","meta":{"static":true}}],"alternateClassNames":[],"aliases":{},"id":"class-YJS.log.Log","short_doc":"A log is the primary object used for logging. ...","component":false,"superclasses":[],"subclasses":[],"mixedInto":[],"mixins":[],"parentMixins":[],"html":"<div><pre class=\"hierarchy\"><h4>Requires</h4><div class='dependency'><a href='#!/api/YJS.log.Config' rel='YJS.log.Config' class='docClass'>YJS.log.Config</a></div><h4>Uses</h4><div class='dependency'><a href='#!/api/YJS.log.Level' rel='YJS.log.Level' class='docClass'>YJS.log.Level</a></div><h4>Files</h4><div class='dependency'><a href='source/Log.html#YJS-log-Log' target='_blank'>Log.js</a></div></pre><div class='doc-contents'><p>A log is the primary object used for logging. Logs are created using the <a href=\"#!/api/YJS.log.Factory\" rel=\"YJS.log.Factory\" class=\"docClass\">log factory</a>.</p>\n\n<pre><code>var LOG = <a href=\"#!/api/YJS.log.Factory-method-get\" rel=\"YJS.log.Factory-method-get\" class=\"docClass\">YJS.log.Factory.get</a>('mylog');\n</code></pre>\n\n<p>The above call will create and return a reference to the <code>mylog</code> log. Because logs are associated with a name, one\ncould create a named log to log all the AJAX calls in their code.</p>\n\n<pre><code>App.AJAX_LOG = <a href=\"#!/api/YJS.log.Factory-method-get\" rel=\"YJS.log.Factory-method-get\" class=\"docClass\">YJS.log.Factory.get</a>('ajax');\n...\nApp.AJAX_LOG.info('Request sent.');\nApp.AJAX_LOG.info('Response received.');\n...\nApp.AJAX_LOG.error('Response timed out');\n</code></pre>\n\n<p>Named logs give you more control over which messages will ultimately be logged. One could, for example, setup the\nlog configuration so only error-level or higher messages are logged for the <code>ajax</code> log but have info-level or higher\nmessages logged for the <code>mylog</code> log.</p>\n\n<p>Log messages may contain placeholder strings and they may be used as a template. The placeholders will be filled in\nusing the arguments following the first argument. Any extra arguments will be appended to the end of the message.</p>\n\n<pre><code>LOG.error('%s must be between %i and %i', 'Foo', 1, 10, ' and must be integral.');\n</code></pre>\n\n<p>See <a href=\"#!/api/YJS.String-method-printf\" rel=\"YJS.String-method-printf\" class=\"docClass\">YJS.String.printf</a> for details. It works very similar to how some browsers support string substitutions with\nconsole#log and console's other similar methods.</p>\n</div><div class='members'><div class='members-section'><div class='definedBy'>Defined By</div><h3 class='members-title icon-property'>Properties</h3><div class='subsection'><div id='property-name' class='member first-child not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='YJS.log.Log'>YJS.log.Log</span><br/><a href='source/Log.html#YJS-log-Log-property-name' target='_blank' class='view-source'>view source</a></div><a href='#!/api/YJS.log.Log-property-name' class='name expandable'>name</a> : <a href=\"#!/api/String\" rel=\"String\" class=\"docClass\">String</a><span class=\"signature\"><span class='readonly' >readonly</span></span></div><div class='description'><div class='short'><p>The name of this log.</p>\n</div><div class='long'><p>The name of this log.</p>\n</div></div></div></div></div><div class='members-section'><h3 class='members-title icon-method'>Methods</h3><div class='subsection'><div class='definedBy'>Defined By</div><h4 class='members-subtitle'>Instance methods</h3><div id='method-constructor' class='member first-child not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='YJS.log.Log'>YJS.log.Log</span><br/><a href='source/Log.html#YJS-log-Log-method-constructor' target='_blank' class='view-source'>view source</a></div><strong class='new-keyword'>new</strong><a href='#!/api/YJS.log.Log-method-constructor' class='name expandable'>YJS.log.Log</a>( <span class='pre'>[cfgs]</span> ) : <a href=\"#!/api/YJS.log.Log\" rel=\"YJS.log.Log\" class=\"docClass\">YJS.log.Log</a><span class=\"signature\"></span></div><div class='description'><div class='short'>Creates a immutable log with the specified name. ...</div><div class='long'><p>Creates a immutable log with the specified name. Typically, this constructor is <em>not</em> used directly. Instead,\n<a href=\"#!/api/YJS.log.Factory-method-get\" rel=\"YJS.log.Factory-method-get\" class=\"docClass\">YJS.log.Factory.get</a> is used.</p>\n<h3 class=\"pa\">Parameters</h3><ul><li><span class='pre'>cfgs</span> : <a href=\"#!/api/Object\" rel=\"Object\" class=\"docClass\">Object</a> (optional)<div class='sub-desc'>\n<ul><li><span class='pre'>name</span> : <a href=\"#!/api/String\" rel=\"String\" class=\"docClass\">String</a> (optional)<div class='sub-desc'><p>The name of the log. A dot (.) may be used to separate the name parts. Name parts\n  must not contain whitespace and must have a length greater than zero with one exception. The name itself may be\n  the empty string.</p>\n<p>Defaults to: <code>&quot;&quot;</code></p></div></li></ul></div></li></ul><h3 class='pa'>Returns</h3><ul><li><span class='pre'><a href=\"#!/api/YJS.log.Log\" rel=\"YJS.log.Log\" class=\"docClass\">YJS.log.Log</a></span><div class='sub-desc'>\n</div></li></ul><h3 class='pa'>Throws</h3><ul><li><span class='pre'><a href=\"#!/api/Object\" rel=\"Object\" class=\"docClass\">Object</a></span><div class='sub-desc'><p>TypeError</p>\n</div></li></ul></div></div></div><div id='method-debug' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='YJS.log.Log'>YJS.log.Log</span><br/><a href='source/Log.html#YJS-log-Log-method-debug' target='_blank' class='view-source'>view source</a></div><a href='#!/api/YJS.log.Log-method-debug' class='name expandable'>debug</a>( <span class='pre'>template, data</span> )<span class=\"signature\"></span></div><div class='description'><div class='short'>Logs messages at the 'debug' level. ...</div><div class='long'><p>Logs messages at the 'debug' level.</p>\n\n<pre><code>YJS.LOG.debug('Foo was 10. Expected 12.');\nYJS.LOG.debug('%s was %i. Expected %i.', 'Foo', 10, 12);\nYJS.LOG.debug('%s was %i.', 'Foo', 10, ' Expected 12.');\n</code></pre>\n<h3 class=\"pa\">Parameters</h3><ul><li><span class='pre'>template</span> : <a href=\"#!/api/String\" rel=\"String\" class=\"docClass\">String</a><div class='sub-desc'><p>The message template with optional placeholders (aka substitution strings) that is used to\n  help form the log message.</p>\n</div></li><li><span class='pre'>data</span> : Mixed...<div class='sub-desc'><p>The data to merge with the template and/or to append to the end of the message.</p>\n</div></li></ul></div></div></div><div id='method-error' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='YJS.log.Log'>YJS.log.Log</span><br/><a href='source/Log.html#YJS-log-Log-method-error' target='_blank' class='view-source'>view source</a></div><a href='#!/api/YJS.log.Log-method-error' class='name expandable'>error</a>( <span class='pre'>template, data</span> )<span class=\"signature\"></span></div><div class='description'><div class='short'>Logs messages at the 'error' level. ...</div><div class='long'><p>Logs messages at the 'error' level.</p>\n\n<pre><code>YJS.LOG.error('Foo was 10. Expected 12. Shutting down Foo.');\nYJS.LOG.error('%s was %i. Expected %i. Shutting down %s.', 'Foo', 10, 12, 'Foo');\nYJS.LOG.error('%s was %i.', 'Foo', 10, ' Expected 12.', ' Shutting down Foo.');\n</code></pre>\n<h3 class=\"pa\">Parameters</h3><ul><li><span class='pre'>template</span> : <a href=\"#!/api/String\" rel=\"String\" class=\"docClass\">String</a><div class='sub-desc'><p>The message template with optional placeholders (aka substitution strings) that is used to\n  help form the log message.</p>\n</div></li><li><span class='pre'>data</span> : Mixed...<div class='sub-desc'><p>The data to merge with the template and/or to append to the end of the message.</p>\n</div></li></ul></div></div></div><div id='method-fatal' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='YJS.log.Log'>YJS.log.Log</span><br/><a href='source/Log.html#YJS-log-Log-method-fatal' target='_blank' class='view-source'>view source</a></div><a href='#!/api/YJS.log.Log-method-fatal' class='name expandable'>fatal</a>( <span class='pre'>template, data</span> )<span class=\"signature\"></span></div><div class='description'><div class='short'>Logs messages at the 'fatal' level. ...</div><div class='long'><p>Logs messages at the 'fatal' level.</p>\n\n<pre><code>YJS.LOG.fatal('Foo was 10. Expected 12. Aborting!!');\nYJS.LOG.fatal('%s was %i. Expected %i. %s!!', 'Foo', 10, 12, 'Aborting');\nYJS.LOG.fatal('%s was %i.', 'Foo', 10, ' Expected 12.', ' Aborting!!');\n</code></pre>\n<h3 class=\"pa\">Parameters</h3><ul><li><span class='pre'>template</span> : <a href=\"#!/api/String\" rel=\"String\" class=\"docClass\">String</a><div class='sub-desc'><p>The message template with optional placeholders (aka substitution strings) that is used to\n  help form the log message.</p>\n</div></li><li><span class='pre'>data</span> : Mixed...<div class='sub-desc'><p>The data to merge with the template and/or to append to the end of the message.</p>\n</div></li></ul></div></div></div><div id='method-info' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='YJS.log.Log'>YJS.log.Log</span><br/><a href='source/Log.html#YJS-log-Log-method-info' target='_blank' class='view-source'>view source</a></div><a href='#!/api/YJS.log.Log-method-info' class='name expandable'>info</a>( <span class='pre'>template, data</span> )<span class=\"signature\"></span></div><div class='description'><div class='short'>Logs messages at the 'info' level. ...</div><div class='long'><p>Logs messages at the 'info' level.</p>\n\n<pre><code>YJS.LOG.info('BTW, Foo was 10. Expected 12.');\nYJS.LOG.info('BTW, %s was %i. Expected %i.', 'Foo', 10, 12);\nYJS.LOG.info('BTW, %s was %i.', 'Foo', 10, ' Expected 12.');\n</code></pre>\n<h3 class=\"pa\">Parameters</h3><ul><li><span class='pre'>template</span> : <a href=\"#!/api/String\" rel=\"String\" class=\"docClass\">String</a><div class='sub-desc'><p>The message template with optional placeholders (aka substitution strings) that is used to\n  help form the log message.</p>\n</div></li><li><span class='pre'>data</span> : Mixed...<div class='sub-desc'><p>The data to merge with the template and/or to append to the end of the message.</p>\n</div></li></ul></div></div></div><div id='method-log' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='YJS.log.Log'>YJS.log.Log</span><br/><a href='source/Log.html#YJS-log-Log-method-log' target='_blank' class='view-source'>view source</a></div><a href='#!/api/YJS.log.Log-method-log' class='name expandable'>log</a>( <span class='pre'>template, data</span> )<span class=\"signature\"></span></div><div class='description'><div class='short'>Logs messages at the 'log' level. ...</div><div class='long'><p>Logs messages at the 'log' level.</p>\n\n<pre><code>YJS.LOG.log('Not again. Foo was 10. Expected 12.');\nYJS.LOG.log('Not again. %s was %i. Expected %i.', 'Foo', 10, 12);\nYJS.LOG.log('Not again. %s was %i.', 'Foo', 10, ' Expected 12.');\n</code></pre>\n<h3 class=\"pa\">Parameters</h3><ul><li><span class='pre'>template</span> : <a href=\"#!/api/String\" rel=\"String\" class=\"docClass\">String</a><div class='sub-desc'><p>The message template with optional placeholders (aka substitution strings) that is used to\n  help form the log message.</p>\n</div></li><li><span class='pre'>data</span> : Mixed...<div class='sub-desc'><p>The data to merge with the template and/or to append to the end of the message.</p>\n</div></li></ul></div></div></div><div id='method-logAt' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='YJS.log.Log'>YJS.log.Log</span><br/><a href='source/Log.html#YJS-log-Log-method-logAt' target='_blank' class='view-source'>view source</a></div><a href='#!/api/YJS.log.Log-method-logAt' class='name expandable'>logAt</a>( <span class='pre'>logLevel, template, data</span> )<span class=\"signature\"></span></div><div class='description'><div class='short'>Logs messages at the specified level which allows the ability to chose different log-levels at compile-time and/or\nat...</div><div class='long'><p>Logs messages at the specified level which allows the ability to chose different log-levels at compile-time and/or\nat runtime.</p>\n\n<pre><code>var logLevel = getRuntimeLogLevel();\nvar LOG = <a href=\"#!/api/YJS.log.Factory-method-get\" rel=\"YJS.log.Factory-method-get\" class=\"docClass\">YJS.log.Factory.get</a>('mylog');\n...\nLOG.logAt(logLevel, \"You may or may not see this.\");\n</code></pre>\n<h3 class=\"pa\">Parameters</h3><ul><li><span class='pre'>logLevel</span> : <a href=\"#!/api/Number\" rel=\"Number\" class=\"docClass\">Number</a><div class='sub-desc'><p>The level at which to log the message. See <a href=\"#!/api/YJS.log.Level\" rel=\"YJS.log.Level\" class=\"docClass\">YJS.log.Level</a> for pre-defined log-level values.\n  Other levels beside the pre-defined are allowed too.</p>\n</div></li><li><span class='pre'>template</span> : <a href=\"#!/api/String\" rel=\"String\" class=\"docClass\">String</a><div class='sub-desc'><p>The message template with optional placeholders (aka substitution strings) that is used to\n  help form the log message.</p>\n</div></li><li><span class='pre'>data</span> : Mixed...<div class='sub-desc'><p>The data to merge with the template and/or to append to the end of the message.</p>\n</div></li></ul></div></div></div><div id='method-warn' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='YJS.log.Log'>YJS.log.Log</span><br/><a href='source/Log.html#YJS-log-Log-method-warn' target='_blank' class='view-source'>view source</a></div><a href='#!/api/YJS.log.Log-method-warn' class='name expandable'>warn</a>( <span class='pre'>template, data</span> )<span class=\"signature\"></span></div><div class='description'><div class='short'>Logs messages at the 'warn' level. ...</div><div class='long'><p>Logs messages at the 'warn' level.</p>\n\n<pre><code>YJS.LOG.warn('Warning! Foo was 10. Expected 12.');\nYJS.LOG.warn('Warning! %s was %i. Expected %i.', 'Foo', 10, 12);\nYJS.LOG.warn('Warning! %s was %i.', 'Foo', 10, ' Expected 12.');\n</code></pre>\n<h3 class=\"pa\">Parameters</h3><ul><li><span class='pre'>template</span> : <a href=\"#!/api/String\" rel=\"String\" class=\"docClass\">String</a><div class='sub-desc'><p>The message template with optional placeholders (aka substitution strings) that is used to\n  help form the log message.</p>\n</div></li><li><span class='pre'>data</span> : Mixed...<div class='sub-desc'><p>The data to merge with the template and/or to append to the end of the message.</p>\n</div></li></ul></div></div></div></div><div class='subsection'><div class='definedBy'>Defined By</div><h4 class='members-subtitle'>Static methods</h3><div id='static-method-getConfig' class='member first-child not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='YJS.log.Log'>YJS.log.Log</span><br/><a href='source/Log.html#YJS-log-Log-static-method-getConfig' target='_blank' class='view-source'>view source</a></div><a href='#!/api/YJS.log.Log-static-method-getConfig' class='name expandable'>getConfig</a>( <span class='pre'></span> ) : <a href=\"#!/api/YJS.log.Config\" rel=\"YJS.log.Config\" class=\"docClass\">YJS.log.Config</a><span class=\"signature\"><span class='static' >static</span></span></div><div class='description'><div class='short'>Returns a reference to the currently active configuration. ...</div><div class='long'><p>Returns a reference to the currently active configuration. If a configuration has not been set, then a reference\nto the <a href=\"#!/api/YJS.log.Config-static-property-DEFAULT\" rel=\"YJS.log.Config-static-property-DEFAULT\" class=\"docClass\">default</a> configuration will be returned.</p>\n\n<p>See <a href=\"#!/api/YJS.log.Log-static-method-setConfig\" rel=\"YJS.log.Log-static-method-setConfig\" class=\"docClass\">YJS.log.Log.setConfig</a> to change the currently active configuration.</p>\n<h3 class='pa'>Returns</h3><ul><li><span class='pre'><a href=\"#!/api/YJS.log.Config\" rel=\"YJS.log.Config\" class=\"docClass\">YJS.log.Config</a></span><div class='sub-desc'><p>The currently active configuration.</p>\n</div></li></ul></div></div></div><div id='static-method-setConfig' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='YJS.log.Log'>YJS.log.Log</span><br/><a href='source/Log.html#YJS-log-Log-static-method-setConfig' target='_blank' class='view-source'>view source</a></div><a href='#!/api/YJS.log.Log-static-method-setConfig' class='name expandable'>setConfig</a>( <span class='pre'>config</span> )<span class=\"signature\"><span class='static' >static</span></span></div><div class='description'><div class='short'>Sets the current runtime configuration. ...</div><div class='long'><p>Sets the current runtime configuration. This is the configuration used by all logs. Setting this will affect all\nexisting logs and any new logs. Individual logs don't have their own configuration. However, individual logs can be\naffected by the configuration.</p>\n\n<p>In other words, only one configuration is active at a time.</p>\n<h3 class=\"pa\">Parameters</h3><ul><li><span class='pre'>config</span> : <a href=\"#!/api/YJS.log.Config\" rel=\"YJS.log.Config\" class=\"docClass\">YJS.log.Config</a><div class='sub-desc'>\n</div></li></ul></div></div></div></div></div></div></div>","meta":{}});